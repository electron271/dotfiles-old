-- vim: set syntax=haskell foldmethod=marker foldmarker={{{,}}}:
-- electron271's config

-- open folds using zo
-- close folds using zc
-- toggle folds using za
-- keybinds may vary, but these are the defaults

-- Imports {{{
import XMonad
import Data.Monoid
import System.Exit

-- Utilities
import XMonad.Util.SpawnOnce
import XMonad.Util.Run
import XMonad.Util.Loggers
import XMonad.Util.NamedActions
import Graphics.X11.ExtraTypes.XF86

-- Hooks
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
import XMonad.Hooks.RefocusLast (refocusLastLayoutHook, refocusLastWhen, isFloat)

-- Import layouts
import XMonad.Layout.Grid
import XMonad.Layout.LayoutHints
import XMonad.Layout.MultiToggle
import XMonad.Layout.Named
import XMonad.Layout.NoBorders
import XMonad.Layout.PerScreen
import XMonad.Layout.Reflect
import XMonad.Layout.ResizableTile
import XMonad.Layout.Simplest(Simplest(..))
import XMonad.Layout.Spiral
import XMonad.Layout.SubLayouts
import XMonad.Layout.Tabbed (addTabs, Shrinker(..), CustomShrink(..), Theme(..))
import XMonad.Layout.TrackFloating
import XMonad.Layout.WorkspaceDir
import XMonad.Layout.LayoutModifier
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import XMonad.Layout.Spacing
import XMonad.Layout.WindowArranger
import XMonad.Layout.Renamed
import XMonad.Layout.LimitWindows
import XMonad.Layout.WindowNavigation


-- Actions
import XMonad.Actions.MouseResize


import qualified XMonad.StackSet as W
import qualified Data.Map        as M

-- ColorScheme module stolen from DT (SET ONLY ONE!)
      -- Possible choice are:
      -- DoomOne
      -- Dracula
      -- GruvboxDark
     -- MonokaiPro
      -- Nord
      -- OceanicNext
      -- Palenight
      -- SolarizedDark
      -- SolarizedLight
      -- TomorrowNight
import Colors.GruvboxDark
import XMonad.Config.Prime (sActions)

-- }}}

-- Defaults {{{
-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "kitty"

-- Set my default font
myFont = "xft:FiraCode Nerd Font:regular:pixelsize=12:antialias=true:hinting=true"

-- My browser
myBrowser = "firefox"

myEditor = "neovide"

-- My status bar
mySB = statusBarProp "xmobar -x 0 $HOME/.config/xmobar/xmobarrc" (pure xmobarPP)

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = False

-- Width of the window border in pixels.
--
myBorderWidth   = 2

-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- ("right alt"), which does not conflict with emacs keybindings. The
-- "windows key" is usually mod4Mask.
--
myModMask       = mod4Mask

-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
-- A tagging example:
--
-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
--
myWorkspaces    = ["web", "chat", "term", "media", "etc"] ++ map show [6..9]
-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor  = colorBack
myFocusedBorderColor = color13

-- Import my system sound player
-- TODO
-- mySoundPlayer = "ffplay -nodisk -autoexit "
-- }}}

-- Startup hook {{{

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook = do
      spawn "killall trayer"
      
      spawnOnce "picom"
      spawnOnce "volumeicon"
      spawnOnce "nitrogen --restore &"
      spawn "sleep 2 && trayer --edge top --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true --expand true --monitor 1 --transparent true --alpha 0 --tint 0x232443 --height 22"
-- }}}

-- More variables {{{

--Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.

mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a

mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied

-- if fewer than two windows. So a single window has no gaps.

mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a

mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

-- }}}

-- Layouts {{{

-- Define Layouts {{{
-- Defining a bunch of layouts, many that I don't use.

-- limitWindows n sets maximum number of windows displayed for layout.

-- mySpacing n sets the gap size around the windows.

tall     = renamed [Replace "tall"]

           $ limitWindows 5

           $ smartBorders

           $ windowNavigation

           $ addTabs shrinkText myTabTheme

           $ subLayout [] (smartBorders Simplest)

           $ mySpacing 8

           $ ResizableTall 1 (3/100) (1/2) []

monocle  = renamed [Replace "monocle"]

           $ smartBorders

           $ windowNavigation

           $ addTabs shrinkText myTabTheme

           $ subLayout [] (smartBorders Simplest)

           $ Full

floats   = renamed [Replace "floats"]

           $ smartBorders

           $ simplestFloat

grid     = renamed [Replace "grid"]

           $ limitWindows 9

           $ smartBorders

           $ windowNavigation

           $ addTabs shrinkText myTabTheme

           $ subLayout [] (smartBorders Simplest)

           $ mySpacing 8

           $ mkToggle (single MIRROR)

           $ Grid (16/10)

spirals  = renamed [Replace "spirals"]

           $ limitWindows 9

           $ smartBorders

           $ windowNavigation

           $ addTabs shrinkText myTabTheme

           $ subLayout [] (smartBorders Simplest)

           $ mySpacing' 8

           $ spiral (6/7)

threeCol = renamed [Replace "threeCol"]

           $ limitWindows 7

           $ smartBorders

           $ windowNavigation

           $ addTabs shrinkText myTabTheme

           $ subLayout [] (smartBorders Simplest)

           $ ThreeCol 1 (3/100) (1/2)

threeRow = renamed [Replace "threeRow"]

           $ limitWindows 7

           $ smartBorders

           $ windowNavigation

           $ addTabs shrinkText myTabTheme

           $ subLayout [] (smartBorders Simplest)

           -- Mirror takes a layout and rotates it by 90 degrees.

           -- So we are applying Mirror to the ThreeCol layout.

           $ Mirror

           $ ThreeCol 1 (3/100) (1/2)

tabs     = renamed [Replace "tabs"]

           -- I cannot add spacing to this layout because it will

           -- add spacing between window and tabs which looks bad.

           $ tabbed shrinkText myTabTheme

tallAccordion  = renamed [Replace "tallAccordion"]

           $ Accordion

wideAccordion  = renamed [Replace "wideAccordion"]

           $ Mirror Accordion

-- setting colors for tabs layout and tabs sublayout.

myTabTheme = def { fontName            = myFont

                 , activeColor         = color15

                 , inactiveColor       = color08

                 , activeBorderColor   = color15

                 , inactiveBorderColor = colorBack

                 , activeTextColor     = colorBack

                 , inactiveTextColor   = color16

                 }

-- }}}

-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
myLayout = avoidStruts

               $ mouseResize

               $ windowArrange

               $ T.toggleLayouts floats

               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout

  where

    myDefaultLayout = withBorder myBorderWidth tall

                                           ||| noBorders monocle

                                           ||| floats

                                           ||| noBorders tabs

                                           ||| grid

                                           ||| spirals

                                           ||| threeCol

                                           ||| threeRow

                                           ||| tallAccordion

                                           ||| wideAccordion

-- }}}

-- Scratchpads {{{

myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
                , NS "cmus" spawnCmus findCmus manageCmus
                , NS "calculator" spawnCalc findCalc manageCalc
                ]
    where
        spawnTerminal = myTerminal ++ " -T scratchpad"
        findTerminal = title =? "scratchpad"
        manageTerminal = customFloating $ W.RationalRect l t w h
            where
                h = 0.9
                w = 0.9
                t = 0.95 -h
                l = 0.95 -w
        spawnCmus = myTerminal ++ " -T cmus -e cmus"
        findCmus = title =? "cmus"
        manageCmus = customFloating $ W.RationalRect l t w h
            where
                h = 0.9
                w = 0.9
                t = 0.95 -h
                l = 0.95 -w
        spawnCalc = "qalculate-gtk"
        findCalc = title =? "Qalculate!"
        manageCalc = customFloating $ W.RationalRect l t w h
            where
                h = 0.9
                w = 0.9
                t = 0.95 -h
                l = 0.95 -w

-- }}}

-- Key bindings {{{
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)

    -- launch rofi
    , ((modm,               xK_p     ), spawn "rofi -show drun" )

    -- launch gmrun
    , ((modm .|. shiftMask, xK_p     ), spawn "rofi -show run" )
    
    -- launch rofi ssh
    , ((modm .|. shiftMask, xK_s     ), spawn "rofi -show ssh" )

    -- close focused window
    , ((modm .|. shiftMask, xK_c     ), kill)

     -- Rotate through the available layout algorithms
    , ((modm,               xK_space ), sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)

    -- Move focus to the next window
    , ((modm,               xK_Tab   ), windows W.focusDown)

    -- Move focus to the next window
    , ((modm,               xK_j     ), windows W.focusDown)

    -- Move focus to the previous window
    , ((modm,               xK_k     ), windows W.focusUp  )

    -- Move focus to the master window
    , ((modm,               xK_m     ), windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ((modm,               xK_Return), windows W.swapMaster)

    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

    -- Shrink the master area
    , ((modm,               xK_h     ), sendMessage Shrink)

    -- Expand the master area
    , ((modm,               xK_l     ), sendMessage Expand)

    -- Push window back into tiling
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

    , ((0, xF86XK_AudioMute), spawn "pamixer -t")

    , ((0, xF86XK_AudioLowerVolume), spawn "pamixer -d 5")

    , ((0, xF86XK_AudioRaiseVolume), spawn "pamixer -i 5")

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    
    , ((modm              , xK_b     ), sendMessage ToggleStruts)

    -- Quit xmonad
    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))

    -- Restart xmonad
    , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")

    -- TODO: Open a help window
    -- , ((modm .|. shiftMask, xK_slash ), xmessage help) 
    ]
    ++


    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]

-- Mouse bindings {{{
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
-- }}}
-- }}}

-- Window rules {{{

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.

myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , className =? "gmrun"          --> doFloat
    , title     =? "Picture-in-Picture" --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ]

-- }}}

-- Event handling {{{

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook = mempty
-- }}}

-- Status bars and logging {{{

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
myLogHook = return ()

-- Pretty print!
myXmobarPP :: PP
myXmobarPP = def
    { ppSep             = magenta " • "
    , ppTitleSanitize   = xmobarStrip
    , ppCurrent         = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2
    , ppHidden          = white . wrap " " ""
    , ppHiddenNoWindows = lowWhite . wrap " " ""
    , ppUrgent          = red . wrap (yellow "!") (yellow "!")
    , ppOrder           = \[ws, l, _] -> [ws, l]
    , ppExtras          = [logTitles formatFocused formatUnfocused]
    }
  where
    formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
    formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow

    -- | Windows should have *some* title, which should not not exceed a
    -- sane length.
    ppWindow :: String -> String
    ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30

    blue, lowWhite, magenta, red, white, yellow :: String -> String
    magenta  = xmobarColor "#ff00ff" ""
    blue     = xmobarColor "#bd93f9" ""
    white    = xmobarColor "#f8f8f2" ""
    yellow   = xmobarColor "#f1fa8c" ""
    red      = xmobarColor "#ff5555" ""
    lowWhite = xmobarColor "#bbbbbb" ""

-- A structure containing your configuration settings, overriding
-- fields in the default config. Any you don't override, will
-- use the defaults defined in xmonad/XMonad/Config.hs
--
-- No need to modify this.

defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts((modm .|.))

        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }

------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--

main :: IO ()
main = do 
      -- xmproc <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/xmobarrc.hs"
      xmonad 
      . ewmhFullscreen 
      . ewmh
      . withEasySB mySB defToggleStrutsKey 
      $ defaults



